<application>
  <component name="AppStorage">
    <histories>
      <item value="TRANSPOSED" />
      <item value="variety Count" />
      <item value="positive" />
      <item value="$positive" />
      <item value="$neutral" />
      <item value="complete" />
      <item value="完善" />
      <item value="loss" />
      <item value="the number of rows that are kept in memory until flushed out, see above." />
      <item value="* Return the name of the parameter in the multipart form." />
      <item value="Return the name of the parameter in the multipart form." />
      <item value="Return the original filename in the client's filesystem. * &lt;p&gt;This may contain path information depending on the browser used, * but it typically will not with any other than Opera. * @return the original filename, or the empty String if no file has been chosen * in the multipart form, or {@code null} if not defined or not available" />
      <item value="Returns the time this object will expire and be completely removed from COS. Returns null if * this object will never expire." />
      <item value="Represents the object metadata that is stored with Qcloud COS. This includes custom user-supplied * metadata, as well as the standard HTTP headers that Qcloud COS sends and receives * (Content-Length, ETag, Content-MD5, etc.)." />
      <item value="Annotation indicating that a method (or all methods on a class) triggers a * {@link org.springframework.cache.Cache#evict(Object) cache evict} operation. * * &lt;p&gt;This annotation may be used as a &lt;em&gt;meta-annotation&lt;/em&gt; to create custom * &lt;em&gt;composed annotations&lt;/em&gt; with attribute overrides." />
      <item value="刺激点" />
      <item value="* Rounding mode to round towards positive infinity. If the * {@code BigDecimal} is positive, behaves as for * {@code ROUND_UP}; if negative, behaves as for * {@code ROUND_DOWN}. Note that this rounding mode never * decreases the calculated value." />
      <item value="* Rounding mode to round towards negative infinity. If the * {@code BigDecimal} is positive, behave as for * {@code ROUND_DOWN}; if negative, behave as for * {@code ROUND_UP}. Note that this rounding mode never * increases the calculated value." />
      <item value="* Rounding mode to round towards {@literal &quot;nearest neighbor&quot;} * unless both neighbors are equidistant, in which case round up. * Behaves as for {@code ROUND_UP} if the discarded fraction is * &amp;ge; 0.5; otherwise, behaves as for {@code ROUND_DOWN}. Note * that this is the rounding mode that most of us were taught in * grade school." />
      <item value="分析" />
      <item value="Member Ana" />
      <item value="Annotation that marks a method as a candidate for &lt;i&gt;asynchronous&lt;/i&gt; execution. * Can also be used at the type level, in which case all of the type's methods are * considered as asynchronous." />
      <item value="Annotation that marks a method to be the target of a Rabbit message * listener within a class that is annotated with {@link RabbitListener}. * * &lt;p&gt;See the {@link RabbitListener} for information about permitted method signatures * and available parameters. * &lt;p&gt;&lt;b&gt;It is important to understand that when a message arrives, the method selection * depends on the payload type. The type is matched with a single non-annotated parameter, * or one that is annotated with {@code @Payload}. * There must be no ambiguity - the system * must be able to select exactly one method based on the payload type.&lt;/b&gt;" />
      <item value="Document DTO" />
      <item value="身份" />
      <item value="reject" />
      <item value="驳回" />
      <item value="通过" />
      <item value="MAINTAINER" />
      <item value="/** * Limits the acceptable values for this parameter. * &lt;p&gt; * There are three ways to describe the allowable values: * &lt;ol&gt; * &lt;li&gt;To set a list of values, provide a comma-separated list. * For example: {@code first, second, third}.&lt;/li&gt; * &lt;li&gt;To set a range of values, start the value with &quot;range&quot;, and surrounding by square * brackets include the minimum and maximum values, or round brackets for exclusive minimum and maximum values. * For example: {@code range[1, 5]}, {@code range(1, 5)}, {@code range[1, 5)}.&lt;/li&gt; * &lt;li&gt;To set a minimum/maximum value, use the same format for range but use &quot;infinity&quot; * or &quot;-infinity&quot; as the second value. For example, {@code range[1, infinity]} means the * minimum allowable value of this parameter is 1.&lt;/li&gt; * &lt;/ol&gt; */" />
      <item value="2019-06-26 17:09:26.794 INFO [ main] .RepositoryConfigurationExtensionSupport@isStrictRepositoryCandidate:363 : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.qty.cab.edm.repository.ClientIdentityRepo." />
      <item value="* Specify that URLs are allowed by anyone." />
      <item value="Maps any request." />
      <item value="principal" />
      <item value="credentials" />
      <item value="Conflict" />
      <item value="algorithm" />
      <item value="Determines if Spring Security's pre post annotations should be enabled. Default is * false. * @return true if pre post annotations should be enabled false otherwise." />
      <item value="Adds CSRF support. This is activated by default when using" />
      <item value="* Specify that URLs are allowed by anonymous users." />
      <item value="Override this method to configure the {@link HttpSecurity}. Typically subclasses * should not invoke this method by calling super as it may override their * configuration. The default configuration is:" />
      <item value="* &lt;p&gt; * The {@link WebSecurity} is created by {@link WebSecurityConfiguration} to create the * {@link FilterChainProxy} known as the Spring Security Filter Chain * (springSecurityFilterChain). The springSecurityFilterChain is the {@link Filter} that * the {@link DelegatingFilterProxy} delegates to." />
      <item value="* Override this method to configure {@link WebSecurity}. For example, if you wish to * ignore certain requests." />
      <item value="* Annotation for specifying a method access-control expression which will be evaluated to * decide whether a method invocation is allowed or not." />
      <item value="Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being * created. * &lt;p/&gt; * This will typically be used when providing an extended base interface for all repositories in combination with a * custom repository base class to implement methods declared in that intermediate interface. In this case you typically * derive your concrete repository interfaces from the intermediate one but don't want to create a Spring bean for the * intermediate interface. * * @author Oliver Gierke" />
      <item value="** * (Optional) The basic or embeddable class that is the element * type of the collection. This element is optional only if the * collection field or property is defined using Java generics, * and must be specified otherwise. It defaults to the * paramterized type of the collection when defined using * generics." />
      <item value="* Specifies a collection of instances of a basic type or embeddable * class. * Must be specified if the collection is to be mapped by * means of a collection table." />
      <item value="* Custom SQL statement for delete of an entity/collection." />
      <item value="Where clause to add to the element Entity or target entity of a collection. The clause is written in SQL. * A common use case here is for soft-deletes." />
      <item value="女性" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="108" />
        <entry key="ENGLISH" value="109" />
        <entry key="FRENCH" value="1" />
        <entry key="MALAY" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>