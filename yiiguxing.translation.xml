<application>
  <component name="AppStorage">
    <histories>
      <item value="Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being * created. * &lt;p/&gt; * This will typically be used when providing an extended base interface for all repositories in combination with a * custom repository base class to implement methods declared in that intermediate interface. In this case you typically * derive your concrete repository interfaces from the intermediate one but don't want to create a Spring bean for the * intermediate interface. * * @author Oliver Gierke" />
      <item value="** * (Optional) The basic or embeddable class that is the element * type of the collection. This element is optional only if the * collection field or property is defined using Java generics, * and must be specified otherwise. It defaults to the * paramterized type of the collection when defined using * generics." />
      <item value="* Specifies a collection of instances of a basic type or embeddable * class. * Must be specified if the collection is to be mapped by * means of a collection table." />
      <item value="* Custom SQL statement for delete of an entity/collection." />
      <item value="Where clause to add to the element Entity or target entity of a collection. The clause is written in SQL. * A common use case here is for soft-deletes." />
      <item value="女性" />
      <item value="男性" />
      <item value="性别" />
      <item value="Marks a property as the update timestamp of the containing entity. The property value will be set to the current VM * date whenever the owning entity is updated." />
      <item value="Marks a property as the creation timestamp of the containing entity. The property value will be set to the current * VM date exactly once when saving the owning entity for the first time." />
      <item value="/** * A TypeMismatchException raised while resolving a controller method argument. * Provides access to the target {@link org.springframework.core.MethodParameter * MethodParameter}. *" />
      <item value="Variety" />
      <item value="set Variety Count" />
      <item value="* (Optional) Unique constraints that are to be placed on * the table. These are only used if table generation is in * effect. These constraints apply in addition to any constraints * specified by the &lt;code&gt;Column&lt;/code&gt; and &lt;code&gt;JoinColumn&lt;/code&gt; * annotations and constraints entailed by primary key mappings. * &lt;p&gt; Defaults to no additional constraints." />
      <item value="功能" />
      <item value="annotation" />
      <item value="Buffered Reader" />
      <item value="points Fee" />
      <item value="coupon Fee" />
      <item value="receipt Fee" />
      <item value="Used to specify the path and boundaries for a find operation or query." />
      <item value="Specifies that the property or field is not persistent. It is used * to annotate a property or field of an entity class, mapped * superclass, or embeddable class." />
      <item value="multiply" />
      <item value="collection Fee" />
      <item value="find By Logistics Uuid" />
      <item value="A class can implement the &lt;code&gt;Observer&lt;/code&gt; interface when it * wants to be informed of changes in observable objects." />
      <item value="informed" />
      <item value="literal" />
      <item value="* Rounding mode to round towards {@literal &quot;nearest neighbor&quot;} * unless both neighbors are equidistant, in which case round up. * Behaves as for {@code ROUND_UP} if the discarded fraction is * &amp;ge; 0.5; otherwise, behaves as for {@code ROUND_DOWN}. Note * that this is the rounding mode that most of us were taught in * grade school." />
      <item value="Annotation that can be used to define one or more alternative names for * a property, accepted during deserialization as alternative to the official * name. Alias information is also exposed during POJO introspection, but has * no effect during serialization where primary name is always used." />
      <item value="SingularAttribute named billing and of type com.yydscm.model.BillingFee is not present" />
      <item value="* Inserts the specified element into this queue if it is possible to do so * immediately without violating capacity restrictions, returning * {@code true} upon success and throwing an {@code IllegalStateException} * if no space is currently available." />
      <item value="Inserts the specified element into this queue if it is possible to do * so immediately without violating capacity restrictions. * When using a capacity-restricted queue, this method is generally * preferable to {@link #add}, which can fail to insert an element only * by throwing an exception." />
      <item value="* Inserts the specified element into this queue if it is possible to do * so immediately without violating capacity restrictions." />
      <item value="restrictions" />
      <item value="capacity" />
      <item value="violating" />
      <item value="Retrieves" />
      <item value="Specification in the sense of Domain Driven Design" />
      <item value="* Specification in the sense of Domain Driven Design." />
      <item value="营收" />
      <item value="RECEIVE" />
      <item value="Temporal Adjuster" />
      <item value="temporal" />
      <item value="adjusting" />
      <item value="* Annotation that can be used to apply Mockito spies to a Spring * {@link ApplicationContext}. Can be used as a class level annotation or on fields in * either {@code @Configuration} classes, or test classes that are * {@link RunWith @RunWith} the {@link SpringRunner}. * &lt;p&gt; * Spies can be applied by type or by {@link #name() bean name}. All beans in the context * of the same type will be wrapped with the spy. If no existing bean is defined a new one * will be added. Dependencies that are known to the application context but are not beans * (such as those * {@link org.springframework.beans.factory.config.ConfigurableListableBeanFactory#registerResolvableDependency(Class, Object) * registered directly} ) will not be found and a spied bean will be added to the context * alongside the existing dependency. * &lt;p&gt; * When {@code @SpyBean} is used on a field, as well as being registered in the * application context, the spy will also be injected into the field. Typical usage might * be: &lt;pre class=&quot;code&quot;&gt; * &amp;#064;RunWith(SpringRunner.class) * public class ExampleTests {" />
      <item value="  净利润" />
      <item value="  净值" />
      <item value="jin zhi" />
      <item value="净" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="73" />
        <entry key="ENGLISH" value="74" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>